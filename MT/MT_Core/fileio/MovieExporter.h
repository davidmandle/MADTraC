#ifndef MT_MovieExporter_H
#define MT_MovieExporter_H

/** @addtogroup MT_Core 
 * @{
 */  
 
/** @file
 * MT_MovieExporter.h
 *
 *  Contains a module for creating a movie by giving a sequence of
 *  IplImage frames.  The movie can either be a sequence of individual
 *  image files (frames) or an uncompressed AVI as generated by
 *  OpenCV's cvVideoWriter.
 *
 *  Created by Daniel Swain on 12/20/09.
 *  
 */

#ifndef MT_NO_OPENCV
#ifdef __APPLE__
  #include <OpenCV/OpenCV.h>
#else
  #include <cv.h>
  #include <cvaux.h>
  #include <highgui.h>
  #include <ml.h>
#endif
#endif

#include <string>

#include "MT/MT_Core/gl/glImageSupport.h"

/** The default filename format for image sequence output. */
const char* const MT_ME_DEFAULT_FRAME_FILENAME_FORMAT = "frame%06d.jpg";

typedef enum _exporter_type
{
    MT_ME_NONE,              /**< No output video writer. */
    MT_ME_CV_VIDEO_WRITER,   /**< Output to an OpenCV cvVideoWriter
                              * (uncompressed AVI) */
    MT_ME_IMAGE_SEQUENCE,    /**< Output to a sequence of images. */
} MT_ME_Type;  /**< Format type for movie exporter. */

/** @class MT_MovieExporter
 *
 * @brief A class to export sequences of images either striaght to
 * disk or as an uncompressed AVI.
 *
 * Example of usage:
 * @code
 * MT_MovieExporter avi_exporter, seq_exporter;
 *
 * avi_exporter.initForCvVideoWriter("test.avi", // filename
 *                                   25.0,       // frames per second
 *                                   640,        // frame width
 *                                   480)        // frame height
 * seq_exporter.initForImageSequence("frames_folder", // path to frames
 *                                   "frame%04.jpg")  // jpeg frames
 *                                                    // with names
 *                                                    // e.g. frame0001.jpg
 * IplImage* the_frame;
 * for( ... each frame ... )
 * {
 *     // ... whatever creates the frames...
 *
 *     avi_exporter.saveFrame(the_frame);
 *     seq_exporter.saveFrame(the_frame);
 * }
 * @endcode
 *
 */
class MT_MovieExporter
{
private:
    MT_ME_Type m_METype; 
    unsigned int m_iFrameNumber;
    unsigned int m_iSkip;
    unsigned int m_iNumSinceLastFrame;
    std::string m_sFilename;

#ifndef MT_NO_OPENCV    
    CvVideoWriter* m_pVideoWriter;
#else
    void* m_pVideoWriter;
#endif    

    void releaseVideoWriter();

public:
    /** Ctor doesn't do anything but initialize member variables to
     * safe values.
     * @see initForCvVideoWriter
     * @see initForImageSequence
     */
    MT_MovieExporter();
    /** Dtor releases the cvVideoWriter if necessary. */
    ~MT_MovieExporter();

    /** Initialize the exporter to use cvVideoWriter to create an
     * uncompressed AVI file.
     * @param filename The filename of the output AVI.  Make sure that
     * the filename is in a location that the program can write to.
     * @param frames_per_second Frame rate (in FPS) for the AVI.
     * @param frame_width Width of one frame in pixels.
     * @param frame_height Height of one frame in pixels.
     * @param skip_frames Only write on every (skip_frames + 1)'th
     * call to saveFrame.  For example set to 1 to skip every other frame.
     */
    void initForCvVideoWriter(const char* filename,
                              double frames_per_second,
                              unsigned int frame_width,
                              unsigned int frame_height,
                              unsigned int skip_frames = 0);
    /** Initialize the exporter to write a sequence of image files.
     * @param path Path to where the files should be saved.
     * @param filename_formatter Valid printf-style format string for
     * the image file.  The type of image is determined by the
     * extension and should work for standard (bmp, jpg, png) image
     * formats. The format string needs to have an integer-type
     * formatter and for best results should be padded with enough
     * zeros so that every frame number will fit.  Something like the
     * default (frame%06d.jpg) should work.
     * @param skip_frames Only write on every (skip_frames + 1)'th
     * call to saveFrame.  For example set to 1 to skip every other frame.
     * @see MT_ME_DEFAULT_FRAME_FILENAME_FORMAT */
    void initForImageSequence(const char* path,
                              const char* filename_formatter = MT_ME_DEFAULT_FRAME_FILENAME_FORMAT,
                              unsigned int skip_frames = 0);

    /** Save the frame to disk, unless the skip_frames argument was
     * nonzero in the init function.  If skip_frames was nonzero, then
     * only the (skip_frames+1)'th frame is written.  saveFrame should
     * be called regardless, as it increments the counter used for the
     * skip mechanism. */
#ifndef MT_NO_OPENCV
    void saveFrame(const IplImage* frame);
#else
    void saveFrame(void* frame){};
#endif

    /** Provides a check to make sure the exporter is properly
     * initialized. */
    bool getIsActive() const {return m_METype != MT_ME_NONE;};

    /** Can be used to stop an initialized exporter. */
    void deactivate(){m_METype = MT_ME_NONE; releaseVideoWriter();};
};

/** @} */

#endif // MT_MovieExporter_H
